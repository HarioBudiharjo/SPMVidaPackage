#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef VIDALIVENESS_SWIFT_H
#define VIDALIVENESS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="vidaLiveness",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class UIFont;

/// Configure the button UI for the whole liveness flow.
SWIFT_CLASS("_TtC12vidaLiveness9CTAConfig")
@interface CTAConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Configure the button UI for the whole liveness flow.
/// \param backgroundColor The background color of button
///
/// \param textColor The color of button text
///
/// \param textFont The font of button text
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textColor:(UIColor * _Nonnull)textColor textFont:(UIFont * _Nullable)textFont OBJC_DESIGNATED_INITIALIZER;
@end




/// Different shapes supported for the camera preview. Default is <code>OverlayShape/oval</code>
typedef SWIFT_ENUM(NSInteger, OverlayShape, open) {
  OverlayShapeCircle = 0,
  OverlayShapeSquare = 1,
  OverlayShapeOval = 2,
  OverlayShapeRectangle = 3,
};


/// Configuration options for the UI of full liveness flow.
SWIFT_CLASS("_TtC12vidaLiveness20SDKUIComponentConfig")
@interface SDKUIComponentConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Configuration options for the UI of full liveness flow.
/// This allows to customise the screen background color and text color;
/// button background color, button text color and font;
/// camera overlay shape, background color, border color and width;
/// liveness success animation stroke color; and
/// liveness feedback message text color and font.
/// \param tutorialScrBackgroundColor The background color of liveness flow tutorial screen.
///
/// \param tutorialScrTextColor The text color for liveness flow tutorial screen.
///
/// \param transactionIdBackgroundColor The background color of the transaction ID.
///
/// \param transactionIdTextColor The text color for the transaction ID.
///
/// \param tutorialWarningTextColor The text color for the “Avoid wearing these” warning message.
///
/// \param tutorialWarningIconTextColor The text color for icon text below “Avoid wearing these” warning message.
///
/// \param tutorialInstructionTextColor The text color for the “Move to a well lit space” instruction message.
///
/// \param cameraPermissionScrBackgroundColor The background color for camera permission popup.
///
/// \param cameraPermissionScrTextColor The text color for camera permission popup.
///
/// \param primaryCTAConfig The primary action button for the liveness flow, configure using <code>CTAConfig</code>.
///
/// \param secondaryCTAConfig The secondary action button for the liveness flow, configure using <code>CTAConfig</code>.
///
/// \param cameraPreviewScrBackgroundColor The background color for camera preview screen.
///
/// \param overlayShape The shape of overlay on camera perview.
///
/// \param overlayBackgroundColor The color for overlay on camera perview.
///
/// \param overlayBorderColor The border color for overlay shape.
///
/// \param overlayBorderWidth The border width for overlay shape.
///
/// \param strokeBorderColor The color for successful liveness animation stroke.
///
/// \param cameraMessageTextColor The text color for liveness feedback messages.
///
/// \param cameraMessageFont The font for liveness feedback messages.
///
/// \param reviewScreenBackgroundColor The background color for the screen to confirm the captured image.
///
/// \param reviewScreenTextColor The text color for the title on screen to confirm the captured image.
///
/// \param reviewInstructionTextColor The text color for the sub-title on screen to confirm the captured image.
///
/// \param reviewInstructionFont The text font for the sub-title on screen to confirm the captured image.
///
/// \param maxRetryAttempts The maximum no of times backend liveness to be performed incase of failure.
///
/// \param cameraPosition Optionally specify which camera to use using AVCaptureDevice.Position. Default is front camera.
///
- (nonnull instancetype)initWithTutorialScrBackgroundColor:(UIColor * _Nonnull)tutorialScrBackgroundColor tutorialScrTextColor:(UIColor * _Nonnull)tutorialScrTextColor transactionIdBackgroundColor:(UIColor * _Nonnull)transactionIdBackgroundColor transactionIdTextColor:(UIColor * _Nonnull)transactionIdTextColor tutorialWarningTextColor:(UIColor * _Nonnull)tutorialWarningTextColor tutorialWarningIconTextColor:(UIColor * _Nonnull)tutorialWarningIconTextColor tutorialInstructionTextColor:(UIColor * _Nonnull)tutorialInstructionTextColor cameraPermissionScrBackgroundColor:(UIColor * _Nonnull)cameraPermissionScrBackgroundColor cameraPermissionScrTextColor:(UIColor * _Nonnull)cameraPermissionScrTextColor primaryCTAConfig:(CTAConfig * _Nonnull)primaryCTAConfig secondaryCTAConfig:(CTAConfig * _Nonnull)secondaryCTAConfig cameraPreviewScrBackgroundColor:(UIColor * _Nonnull)cameraPreviewScrBackgroundColor overlayShape:(enum OverlayShape)overlayShape overlayBackgroundColor:(UIColor * _Nonnull)overlayBackgroundColor overlayBorderColor:(UIColor * _Nonnull)overlayBorderColor overlayBorderWidth:(CGFloat)overlayBorderWidth strokeBorderColor:(UIColor * _Nonnull)strokeBorderColor cameraMessageTextColor:(UIColor * _Nonnull)cameraMessageTextColor cameraMessageFont:(UIFont * _Nullable)cameraMessageFont reviewScreenBackgroundColor:(UIColor * _Nonnull)reviewScreenBackgroundColor reviewScreenTextColor:(UIColor * _Nonnull)reviewScreenTextColor reviewInstructionTextColor:(UIColor * _Nonnull)reviewInstructionTextColor reviewInstructionFont:(UIFont * _Nullable)reviewInstructionFont maxRetryAttempts:(NSInteger)maxRetryAttempts cameraPosition:(enum AVCaptureDevicePosition)cameraPosition showBrandLogo:(BOOL)showBrandLogo OBJC_DESIGNATED_INITIALIZER;
@end








/// Configuration options for the liveness detection.
SWIFT_CLASS("_TtC12vidaLiveness24VIDAFaceDetectionOptions")
@interface VIDAFaceDetectionOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class VIDALivenessRequest;
@class NSString;
@protocol VIDALivenessProtocol;
@class UINavigationController;

/// The main class for all the liveness checks using VIDALiveness.
/// Create an instance of this and call the APIs as required.
SWIFT_CLASS("_TtC12vidaLiveness12VIDALiveness")
@interface VIDALiveness : NSObject
/// Create an instance of VIDALiveness and then call <code>VIDALiveness/initialize(vidaLivenessRequest:sdkUIComponentConfig:detectionOptions:shouldShowTutorialFlow:shouldShowReviewScreen:languageCode:delegate:presentNavigationController:)</code> API.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the VIDALiveness with appropriate configuratoin.
/// This is required to be called before any other liveness API calls.
/// You can have only one instance of VIDALiveness. If there are more API calls then an error will be thrown.
/// \param vidaLivenessRequest Request DTO with all the details like apiKey, licenseKey, etc. required for liveness flow.
///
/// \param sdkUIComponentConfig Configuration for the UI customisations for liveness detection flow using <code>SDKUIComponentConfig</code>.
///
/// \param detectionOptions Configuration for all liveness detection options using <code>VIDAFaceDetectionOptions</code>.
///
/// \param shouldShowTutorialFlow Boolean value to show or not show tutorial screen before liveness detection.
///
/// \param shouldShowReviewScreen Boolean value to show or not show review screen after liveness detection.
///
/// \param languageCode ISO 639-1 Code for the language in which the user should see all the strings. Please make sure to add the translated strings for the same in your application.
///
/// \param delegate Delegate of type <code>VIDALivenessProtocol</code> to receive callback.
///
/// \param presentNavigationController Instance of current view navigation controller where liveness is called.
///
- (void)initializeWithVidaLivenessRequest:(VIDALivenessRequest * _Nonnull)vidaLivenessRequest sdkUIComponentConfig:(SDKUIComponentConfig * _Nonnull)sdkUIComponentConfig detectionOptions:(VIDAFaceDetectionOptions * _Nonnull)detectionOptions shouldShowTutorialFlow:(BOOL)shouldShowTutorialFlow shouldShowReviewScreen:(BOOL)shouldShowReviewScreen languageCode:(NSString * _Nullable)languageCode delegate:(id <VIDALivenessProtocol> _Nonnull)delegate presentNavigationController:(UINavigationController * _Nullable)presentNavigationController;
/// Starts liveness detection flow if <code>VIDALiveness/initialize(vidaLivenessRequest:sdkUIComponentConfig:detectionOptions:shouldShowTutorialFlow:shouldShowReviewScreen:languageCode:delegate:presentNavigationController:)</code>
/// is called with appropriate required parameters and a callback is received in <code>VIDALivenessProtocol/onInitialized()</code> delegate.
- (void)startDetection;
/// Releases the instance of VIDALiveness.
/// Call this API before calling <code>VIDALiveness/initialize(vidaLivenessRequest:sdkUIComponentConfig:detectionOptions:shouldShowTutorialFlow:shouldShowReviewScreen:languageCode:delegate:presentNavigationController:)</code> API again.
- (void)releaseSDK;
@end


@class VIDALivenessResponse;

/// This protocol returns appropriate values via the delegate.
SWIFT_PROTOCOL("_TtP12vidaLiveness20VIDALivenessProtocol_")
@protocol VIDALivenessProtocol
/// Called on successful completion of liveness flow.
/// \param response Response DTO contains final frame of liveness flow and various scores as applicable/available.
///
- (void)onSuccessWithResponse:(VIDALivenessResponse * _Nonnull)response;
/// Called when an error occurrs during the liveness flow.
/// \param errorCode Error code describing the error.
///
/// \param errorMessage Error message describing the error.
///
/// \param response Response DTO contains final frame of liveness flow, various scores as applicable/available and error details if available.
///
- (void)onErrorWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage response:(VIDALivenessResponse * _Nonnull)response;
/// Called when VIDALiveness is initalised successfully after calling
/// <code>VIDALiveness/initialize(vidaLivenessRequest:sdkUIComponentConfig:detectionOptions:shouldShowTutorialFlow:shouldShowReviewScreen:languageCode:delegate:presentNavigationController:)</code>.
/// Next API call can be done only after this.
- (void)onInitialized;
@end


/// Request DTO class to pass details for the liveness flow.
/// Some of these are required parameters while some are optional.
/// The required parameters are marked appropriately.
SWIFT_CLASS("_TtC12vidaLiveness19VIDALivenessRequest")
@interface VIDALivenessRequest : NSObject
/// API key provided by VIDA. This is a <em>required</em> parameter.
@property (nonatomic, copy) NSString * _Nullable apiKey;
/// License key provided by VIDA. This is a <em>required</em> parameter.
@property (nonatomic, copy) NSString * _Nullable licenseKey;
/// ID for the user’s eKYC for which the liveness is to be done.
@property (nonatomic, copy) NSString * _Nullable eKYCID;
/// Unique ID mapped to the user in the partner application’s context.
/// This could be anything like email/phone number/UUID
@property (nonatomic, copy) NSString * _Nullable userInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// Response DTO class for the result of the liveness flow.
SWIFT_CLASS("_TtC12vidaLiveness20VIDALivenessResponse")
@interface VIDALivenessResponse : NSObject
/// Final frame of liveness flow, if available, which was captured after completion of liveness
/// but cold not be succcessful returned as <code>Data</code> object.
/// The value will be nil in case of some errors.
@property (nonatomic, copy) NSData * _Nullable imageData;
/// Score for the liveness between 0 and 1.
/// Default score of -1 will be sent if not applicable/available.
@property (nonatomic) double livenessScore;
/// Score for the manipulation of image between 0 and 1.
/// Default score of -1 will be sent if not applicable/available.
@property (nonatomic) double manipulationScore;
/// Additional details about the error if available/applicable.
@property (nonatomic, copy) NSString * _Nullable errorDetails;
/// Session ID for the whole liveness transaction
@property (nonatomic, copy) NSString * _Nullable sessionId;
/// Transaction ID for the individual liveness transaction on backend
@property (nonatomic, copy) NSString * _Nullable transactionId;
/// Final frames of active liveness flow, if available, returned as <code>[Data]</code>.
/// The value will be nil in case of some errors.
@property (nonatomic, copy) NSArray<NSData *> * _Nullable additionalImages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
